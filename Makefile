# This file was automagically generated by mbed.org. For more information,
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

###############################################################################
# Boiler-plate
DEFAULT: help

QUIET = @

# cross-platform directory manipulation
ifeq ($(shell echo $$OS),$$OS)
    MAKEDIR = if not exist "$(1)" mkdir "$(1)"
    RM = rmdir /S /Q "$(1)"
else
    MAKEDIR = '$(SHELL)' -c "mkdir -p \"$(1)\""
    RM = '$(SHELL)' -c "rm -rf \"$(1)\""
endif

EXECUTABLE ?= MKS_TFTXX
PROC_TYPE  ?= STM32F1xx
BUILDDIR   ?= $(PWD)
OUTDIR     ?= $(BUILDDIR)/output


INCLUDE_PATHS :=


#############
# HAL path
HAL_PATH       := $(BUILDDIR)/Drivers/$(PROC_TYPE)_HAL_Driver/
CMSIS_PATH     := $(BUILDDIR)/Drivers/CMSIS
CMSIS_DEV_PATH := $(CMSIS_PATH)/Device/ST/$(PROC_TYPE)/
MW_PATH        := $(BUILDDIR)/Middlewares

## App objects
SOURCES_C      := $(wildcard $(BUILDDIR)/Src/*.c)
SOURCES_ASM    := $(wildcard $(BUILDDIR)/Src/*.s)
## App includes
INCLUDE_PATHS  += -I$(BUILDDIR)/Src/
INCLUDE_PATHS  += -I$(BUILDDIR)/Inc/


## Drivers lib
DRIVERS_LIB       = $(OUTDIR)/drivers.lib
drivers.sources   = $(wildcard $(HAL_PATH)/Src/*.c)
drivers.sources  += $(wildcard $(CMSIS_DEV_PATH)/Source/*.c)
drivers.sources  += $(wildcard $(CMSIS_DEV_PATH)/Source/Templates/*.c)
drivers.asms     += $(wildcard $(CMSIS_DEV_PATH)/Source/Templates/gcc/*.s)
drivers.objects   = $(addprefix $(OUTDIR)/, $(drivers.sources:$(BUILDDIR)/%.c=%.o))
drivers.objects  += $(addprefix $(OUTDIR)/, $(drivers.asms:$(BUILDDIR)/%.s=%.o))
## Drivers includes
INCLUDE_PATHS += -I$(HAL_PATH)/Inc/
INCLUDE_PATHS += -I$(HAL_PATH)/Inc/Legacy/
INCLUDE_PATHS += -I$(CMSIS_PATH)/Include
INCLUDE_PATHS += -I$(CMSIS_DEV_PATH)/Include

# Middleware lib
MIDDLEWARE_LIB       = $(OUTDIR)/middlewares.lib
middlewares.sources  = $(wildcard $(MW_PATH)/ST/STM32_USB_Host_Library/Core/Src/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/ST/STM32_USB_Host_Library/Class/MSC/Src/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/Third_Party/FatFs/src/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/Third_Party/FatFs/src/option/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/Third_Party/FreeRTOS/Source/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/Third_Party/FreeRTOS/Source/CMSIS_RTOS/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/*.c)
middlewares.sources += $(wildcard $(MW_PATH)/Third_Party/FreeRTOS/Source/portable/MemMang/*.c)
middlewares.objects  = $(addprefix $(OUTDIR)/, $(middlewares.sources:$(BUILDDIR)/%.c=%.o))
## Middlewares includes
INCLUDE_PATHS += -I$(MW_PATH)/ST/STM32_USB_Host_Library/Core/Inc
INCLUDE_PATHS += -I$(MW_PATH)/ST/STM32_USB_Host_Library/Class/MSC/Inc
INCLUDE_PATHS += -I$(MW_PATH)/Third_Party/FatFs/src/
INCLUDE_PATHS += -I$(MW_PATH)/Third_Party/FreeRTOS/Source/include
INCLUDE_PATHS += -I$(MW_PATH)/Third_Party/FreeRTOS/Source/CMSIS_RTOS/
INCLUDE_PATHS += -I$(MW_PATH)/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/




LIBS := $(DRIVERS_LIB) $(MIDDLEWARE_LIB)
OBJS := $(addprefix $(OUTDIR)/, $(SOURCES_C:$(BUILDDIR)/%.c=%.o))
OBJS += $(addprefix $(OUTDIR)/, $(SOURCES_ASM:$(BUILDDIR)/%.s=%.o))
DEPS := $(OBJS:.o=.d) $(drivers.objects:.o=.d) $(middlewares.objects:.o=.d)

APP_FILE := $(OUTDIR)/$(EXECUTABLE)

###############################################################################
# Flags
GEN_FLAGS += -DUSE_HAL_DRIVER
GEN_FLAGS += -DSTM32F107xC
GEN_FLAGS += -D__CORTEX_M3
GEN_FLAGS += -DARM_MATH_CM3
#GEN_FLAGS += -D"__weak=\";__attribute__((weak))\";"
#GEN_FLAGS += -D"__packed=\";__attribute__((__packed__))\";"
#GEN_FLAGS += -DUSE_STDPERIPH_DRIVER
#GEN_FLAGS += -DSTM32F10X_MD
#GEN_FLAGS += -D
#GEN_FLAGS += -D
#GEN_FLAGS += -D
#GEN_FLAGS += -D


C_FLAGS   += -std=gnu99
C_FLAGS   += $(GEN_FLAGS)

CXX_FLAGS += -std=gnu++98
CXX_FLAGS += -fno-rtti
CXX_FLAGS += -Wvla
CXX_FLAGS += $(GEN_FLAGS)

ASM_FLAGS += -x
ASM_FLAGS += assembler-with-cpp
ASM_FLAGS += $(GEN_FLAGS)

AR_FLAGS  += rcsu

#LD_FLAGS    :=-Wl,--gc-sections -Wl,--wrap,main -Wl,--wrap,_malloc_r -Wl,--wrap,_free_r -Wl,--wrap,_realloc_r -Wl,--wrap,_calloc_r -Wl,--wrap,exit -Wl,--wrap,atexit -mcpu=cortex-m3 -mthumb
LD_FLAGS    :=-Wl,--gc-sections  -Wl,--wrap,exit -Wl,--wrap,atexit -mcpu=cortex-m3 -mthumb
LD_SYS_LIBS :=-Wl,--start-group -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys -Wl,--end-group


C_FLAGS += -include
C_FLAGS += mbed_config.h

#[snip]
CXX_FLAGS += -include
CXX_FLAGS += mbed_config.h

###############################################################################
# Tools
COMPILER_PATH   ?= /opt/gcc-arm-none-eabi-6-2017-q1-update/
COMPILER_PREFIX ?= arm-none-eabi-
AS      = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)gcc '-x' 'assembler-with-cpp' '-c' '-Wall' '-Wextra' '-Wno-unused-parameter' '-Wno-missing-field-initializers' '-fmessage-length=0' '-fno-exceptions' '-fno-builtin' '-ffunction-sections' '-fdata-sections' '-funsigned-char' '-MMD' '-fno-delete-null-pointer-checks' '-fomit-frame-pointer' '-Os' '-mcpu=cortex-m3' '-mthumb'
CC      = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)gcc '-std=gnu99' '-c' '-Wall' '-Wextra' '-Wno-unused-parameter' '-Wno-missing-field-initializers' '-fmessage-length=0' '-fno-exceptions' '-fno-builtin' '-ffunction-sections' '-fdata-sections' '-funsigned-char' '-MMD' '-fno-delete-null-pointer-checks' '-fomit-frame-pointer' '-Os' '-mcpu=cortex-m3' '-mthumb'
CPP     = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)g++ '-std=gnu++98' '-fno-rtti' '-Wvla' '-c' '-Wall' '-Wextra' '-Wno-unused-parameter' '-Wno-missing-field-initializers' '-fmessage-length=0' '-fno-exceptions' '-fno-builtin' '-ffunction-sections' '-fdata-sections' '-funsigned-char' '-MMD' '-fno-delete-null-pointer-checks' '-fomit-frame-pointer' '-Os' '-mcpu=cortex-m3' '-mthumb'
LD      = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)gcc
AR      = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)ar $(AR_FLAGS)
ELF2BIN = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)objcopy
PREPROC = $(QUIET)$(COMPILER_PATH)/bin/$(COMPILER_PREFIX)cpp '-E' '-P' '-Wl,--gc-sections' '-Wl,--wrap,main' '-Wl,--wrap,_malloc_r' '-Wl,--wrap,_free_r' '-Wl,--wrap,_realloc_r' '-Wl,--wrap,_calloc_r' '-Wl,--wrap,exit' '-Wl,--wrap,atexit' '-mcpu=cortex-m3' '-mthumb'

MKDIR   = $(QUIET)mkdir -p
RMDIR   = $(QUIET)rm -rf
ECHO    = @echo


#LIBRARY_PATHS := -L$(COMPILER_PATH)/lib


MBED_CONFIG = $(OUTDIR)/mbed_config.h

$(MBED_CONFIG) :
	$(MKDIR) -p $(dir $@)
	@echo "#ifndef __MBED_CONFIG_DATA__" >> $(@)
	@echo "#define __MBED_CONFIG_DATA__" >> $(@)
	@echo "#define MBED_CONF_PLATFORM_STDIO_BAUD_RATE          9600 // set by library:platform" >> $(@)
	@echo "#define MBED_CONF_PLATFORM_DEFAULT_SERIAL_BAUD_RATE 9600 // set by library:platform" >> $(@)
	@echo "#define MBED_CONF_PLATFORM_STDIO_FLUSH_AT_EXIT      1    // set by library:platform" >> $(@)
	@echo "#define MBED_CONF_PLATFORM_STDIO_CONVERT_NEWLINES   0    // set by library:platform" >> $(@)
	@echo "#endif" >> $(@)

INCLUDE_PATHS += -I$(dir $(MBED_CONFIG))

###############################################################################
## Rules

.PHONY: all lst size


all: $(APP_FILE).bin $(APP_FILE).hex

$(OUTDIR)/%.o : $(BUILDDIR)/%.c | $(MBED_CONFIG)
	$(MKDIR) $(dir $@)
	$(ECHO) "  *** CC  : $(notdir $@)"
	$(CC) -c $(C_FLAGS) $(INCLUDE_PATHS) $< -o $@

$(OUTDIR)/%.o : $(BUILDDIR)/%.s | $(MBED_CONFIG)
	$(MKDIR) $(dir $@)
	$(ECHO) "  *** AS  : $(notdir $@)"
	$(AS) -c $(ASM_FLAGS) $(INCLUDE_PATHS) -o $@ $<

#$(APP_FILE).link_script.ld: $(LINKER_SCRIPT)
#	@$(PREPROC) $< -o $@

$(APP_FILE).elf: $(OBJS) $(LIBS) $(BUILDDIR)/STM32F107VC_FLASH.ld #$(APP_FILE).link_script.ld
	@echo "link: $(notdir $@)"
	$(LD) $(LD_FLAGS) -T $(filter %.ld, $^) $(LIBRARY_PATHS) --output $@ $(filter %.o, $^) $(drivers.objects) $(middlewares.objects) $(LD_SYS_LIBS)

$(APP_FILE).bin: $(APP_FILE).elf
	$(ELF2BIN) -O binary $< $@
	@echo "===== bin file ready to flash: $@ ====="

$(APP_FILE).hex: $(APP_FILE).elf
	$(ELF2BIN) -O ihex $< $@


#################

$(MIDDLEWARE_LIB) : $(middlewares.objects)
	$(ECHO) "  === AR  : $(notdir $@)"
	$(MKDIR) $(dir $@)
	$(AR) -o $@ $(middlewares.objects)

$(DRIVERS_LIB) : $(drivers.objects)
	$(ECHO) "  === AR  : $(notdir $@)"
	$(MKDIR) $(dir $@)
	$(AR) -o $@ $(drivers.objects)

#################

test: $(APP_FILE).bin




###############################################################################
# Dependencies

-include $(DEPS)

# Dependencies
###############################################################################

help:
	@echo "helppi..."
